apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'


Properties prop = getSignConfig()

android {

    compileSdkVersion 28
    defaultConfig {
        applicationId "im.fdx.v2ex"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 24
        versionName "2.3.0"
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        googlePlay {
            keyAlias prop['keyAlias']
            keyPassword prop['keyPassword']
            storeFile file(prop['storeFile'])
            storePassword prop['storePassword']
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.googlePlay
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    //test related
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.15.0'
    debugImplementation 'com.readystatesoftware.chuck:library:1.1.0'
    releaseImplementation 'com.readystatesoftware.chuck:library-no-op:1.1.0'
    implementation 'com.elvishew:xlog:1.4.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    //test end
    //local start
    implementation project(':searchablespinnerlibrary')
//    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //local end
    //kotlin start
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
//    implementation "org.jetbrains.anko:anko-sqlite:$anko_version"

    implementation 'androidx.core:core-ktx:0.3'
    //kotlin end


    //google start
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:support-v13:$support_version"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:customtabs:$support_version"
    implementation "com.android.support:preference-v7:$support_version"

    implementation 'com.android.support.constraint:constraint-layout:2.0.0-alpha1'


    implementation "android.arch.persistence.room:runtime:1.1.1"
    kapt "android.arch.persistence.room:compiler:1.1.1"
    //google end

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    //    implementation 'com.daimajia.swipelayout:library:1.2.0@aar'
    implementation "com.android.support:design:$support_version"
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'org.jsoup:jsoup:1.11.3'
//    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.7.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.13'
//    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.google.android:flexbox:0.3.2'
    implementation 'me.drakeet.multitype:multitype:3.4.4'
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'
//    implementation 'com.github.oblac.jodd:jodd-all:v5.0.3'
    implementation 'com.github.esafirm.android-image-picker:imagepicker:1.12.0'
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }
}

def getSignConfig() {
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    return keystoreProperties
}

apply plugin: 'com.google.gms.google-services'