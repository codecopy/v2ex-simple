package im.fdx.v2ex.daogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import im.fdx.v2ex.model.MemberModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_MODEL".
*/
public class MemberModelDao extends AbstractDao<MemberModel, Long> {

    public static final String TABLENAME = "MEMBER_MODEL";

    /**
     * Properties of entity MemberModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Tagline = new Property(2, String.class, "tagline", false, "TAGLINE");
        public final static Property Avatar_mini = new Property(3, String.class, "avatar_mini", false, "AVATAR_MINI");
        public final static Property Avatar_normal = new Property(4, String.class, "avatar_normal", false, "AVATAR_NORMAL");
        public final static Property Avatar_large = new Property(5, String.class, "avatar_large", false, "AVATAR_LARGE");
        public final static Property Github = new Property(6, String.class, "github", false, "GITHUB");
        public final static Property Btc = new Property(7, String.class, "btc", false, "BTC");
        public final static Property Location = new Property(8, String.class, "location", false, "LOCATION");
        public final static Property Bio = new Property(9, String.class, "bio", false, "BIO");
        public final static Property Twitter = new Property(10, String.class, "twitter", false, "TWITTER");
        public final static Property Website = new Property(11, String.class, "website", false, "WEBSITE");
        public final static Property Created = new Property(12, String.class, "created", false, "CREATED");
    }


    public MemberModelDao(DaoConfig config) {
        super(config);
    }
    
    public MemberModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"TAGLINE\" TEXT," + // 2: tagline
                "\"AVATAR_MINI\" TEXT," + // 3: avatar_mini
                "\"AVATAR_NORMAL\" TEXT," + // 4: avatar_normal
                "\"AVATAR_LARGE\" TEXT," + // 5: avatar_large
                "\"GITHUB\" TEXT," + // 6: github
                "\"BTC\" TEXT," + // 7: btc
                "\"LOCATION\" TEXT," + // 8: location
                "\"BIO\" TEXT," + // 9: bio
                "\"TWITTER\" TEXT," + // 10: twitter
                "\"WEBSITE\" TEXT," + // 11: website
                "\"CREATED\" TEXT);"); // 12: created
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String tagline = entity.getTagline();
        if (tagline != null) {
            stmt.bindString(3, tagline);
        }
 
        String avatar_mini = entity.getAvatar_mini();
        if (avatar_mini != null) {
            stmt.bindString(4, avatar_mini);
        }
 
        String avatar_normal = entity.getAvatar_normal();
        if (avatar_normal != null) {
            stmt.bindString(5, avatar_normal);
        }
 
        String avatar_large = entity.getAvatar_large();
        if (avatar_large != null) {
            stmt.bindString(6, avatar_large);
        }
 
        String github = entity.getGithub();
        if (github != null) {
            stmt.bindString(7, github);
        }
 
        String btc = entity.getBtc();
        if (btc != null) {
            stmt.bindString(8, btc);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(10, bio);
        }
 
        String twitter = entity.getTwitter();
        if (twitter != null) {
            stmt.bindString(11, twitter);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(12, website);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(13, created);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String tagline = entity.getTagline();
        if (tagline != null) {
            stmt.bindString(3, tagline);
        }
 
        String avatar_mini = entity.getAvatar_mini();
        if (avatar_mini != null) {
            stmt.bindString(4, avatar_mini);
        }
 
        String avatar_normal = entity.getAvatar_normal();
        if (avatar_normal != null) {
            stmt.bindString(5, avatar_normal);
        }
 
        String avatar_large = entity.getAvatar_large();
        if (avatar_large != null) {
            stmt.bindString(6, avatar_large);
        }
 
        String github = entity.getGithub();
        if (github != null) {
            stmt.bindString(7, github);
        }
 
        String btc = entity.getBtc();
        if (btc != null) {
            stmt.bindString(8, btc);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(10, bio);
        }
 
        String twitter = entity.getTwitter();
        if (twitter != null) {
            stmt.bindString(11, twitter);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(12, website);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(13, created);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MemberModel readEntity(Cursor cursor, int offset) {
        MemberModel entity = new MemberModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tagline
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar_mini
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar_normal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar_large
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // github
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // btc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // location
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bio
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // twitter
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // website
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // created
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagline(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar_mini(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar_normal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar_large(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGithub(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBtc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBio(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTwitter(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWebsite(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreated(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MemberModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MemberModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemberModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
